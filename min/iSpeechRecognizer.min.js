
iSpeechRecognizer=function(params){this.commands=[];this.aliasList={};this.optionalCommands={};this.endpoint="wss://malcom.ispeech.org:8431/";params=params||{};this.apiKey=params.apiKey||"developerdemokeydeveloperdemokey";this.onResponse=params.onResponse||this.onResponse;this.silenceDetection=params.silenceDetection||true;this.workerLoc=params.workerLoc||'iSpeechWorker.min.js';window.navigator=window.navigator||{};navigator.getUserMedia=navigator.getUserMedia||navigator.webkitGetUserMedia||navigator.mozGetUserMedia||null;if(navigator.getUserMedia===null){this.onResponse({result:'error',code:10001,message:'Browser not supported'});return;}}
iSpeechRecognizer.IDLE=0;iSpeechRecognizer.WAITING_USER=1;iSpeechRecognizer.RECORDING=2;iSpeechRecognizer.prototype.state=iSpeechRecognizer.IDLE;iSpeechRecognizer.prototype.isBrowserSupported=function(){return navigator.getUserMedia!=null;}
iSpeechRecognizer.prototype.start=function(){if(this.state!=iSpeechRecognizer.IDLE)
return;navigator.getUserMedia({video:false,audio:true},this.startRecording.bind(this),function(error){this.onResponse({result:'error',code:10001,message:'Audio capture error: '+error.code});});this.state=iSpeechRecognizer.WAITING_USER;}
iSpeechRecognizer.prototype.startRecording=function(localMediaStream){var AudioContext=window.AudioContext||window.webkitAudioContext;var audioContext=new AudioContext();this.mediaStream=localMediaStream;var source=audioContext.createMediaStreamSource(localMediaStream);this.context=source.context;this.node=(this.context.createScriptProcessor||this.context.createJavaScriptNode).call(this.context,8192,1,1);this.worker=new Worker(this.workerLoc);this.worker.onmessage=this.onWorkerMessage.bind(this);this.worker.postMessage({command:'start',params:{apiKey:this.apiKey,srcSampleRate:this.context.sampleRate,options:this.commandArgs(),endpoint:this.endpoint,silenceDetection:this.silenceDetection}});this.node.onaudioprocess=this.processAudio.bind(this);source.connect(this.node);this.node.connect(this.context.destination);this.state=iSpeechRecognizer.RECORDING;}
iSpeechRecognizer.prototype.processAudio=function(e){var buffer=[];buffer=e.inputBuffer.getChannelData(0);this.worker.postMessage({command:'process',buffer:buffer});}
iSpeechRecognizer.prototype.onWorkerMessage=function(e){switch(e.data.command){case'result':if(!!this.onResponse)
this.onResponse(e.data.result);break;case'con':this.webSocket=new(WebSocket||MozWebSocket)(this.endpoint);this.webSocket.onopen=function(){this.worker.postMessage({command:'socketOpen'});}.bind(this);this.webSocket.onmessage=function(x){this.onWorkerMessage({data:{command:'result',result:JSON.parse(x.data)}});this.webSocket.close();}.bind(this);break;case'send':if(!!this.webSocket)
this.webSocket.send(e.data.data);break;case'stop':this.stop();break;}}
iSpeechRecognizer.prototype.onResponse=function(resp){console.log(resp);}
iSpeechRecognizer.prototype.stop=function(){if(this.state!=iSpeechRecognizer.RECORDING)
return;this.state=iSpeechRecognizer.IDLE;this.worker.postMessage({command:'stop'});this.mediaStream.stop();this.node.disconnect();}
iSpeechRecognizer.prototype.addCommand=function(command){this.commands=this.commands.concat(command);}
iSpeechRecognizer.prototype.addAlias=function(alias,values){this.aliasList[alias]=[].concat(values);}
iSpeechRecognizer.prototype.addOptionalCommand=function(key,value){this.optionalCommands[key]=value;}
iSpeechRecognizer.prototype.setLocale=function(locale){this.addOptionalCommand("locale",locale);}
iSpeechRecognizer.prototype.clearCommandAndAlias=function(){this.commands=[];this.aliasList={};this.optionalCommands={};}
iSpeechRecognizer.prototype.pipeSeparate=function(list){var ret=encodeURIComponent(list[0]);for(var i=1;i<list.length;i++){ret+="|"+encodeURIComponent(list[i]);}
return ret;}
iSpeechRecognizer.prototype.commandArgs=function(){var ret="";var alias=[];for(var i=0;i<this.commands.length;i++){alias.push("command"+(i+1));ret+="&"+alias[i]+"="+encodeURIComponent(this.commands[i]);}
for(var key in this.aliasList){ret+="&"+encodeURIComponent(key.toUpperCase())+"="+this.pipeSeparate(this.aliasList[key]);alias.push(key.toUpperCase());}
if(alias.length>0)
ret+="&alias="+this.pipeSeparate(alias);for(var key in this.optionalCommands){ret+="&"+encodeURIComponent(key)+"="+encodeURIComponent(this.optionalCommands[key]);}
return ret;}